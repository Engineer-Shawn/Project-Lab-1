

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11/08/2017 03:17:17 PM
// Design Name: 
// Module Name: freq_counter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//module freq_counter(
//    input clk,
//    input signal,
//    output color
//    );
//    reg temp_color;
//    reg red=3300;
//    reg [20:0]count;
//    reg clock;
//    initial begin 
//        temp_color = 0;
//        count = 0;
//    end
    
//    always @ (posedge signal)
//    begin
//         count <= count + 1'b1;
      
//    if (count > 3300 && count < 5300)
//        temp_color = 1;   
//    end
//    assign color = temp_color;
//endmodule




module Freq_Counter(
    input clk,
    input signal,
    output color
    );
    reg temp_color;
    reg red=3300;
    reg [20:0]count;
    reg clock;
    initial begin 
        temp_color = 0;
        count = 0;
    end
    
    always @ (*)
    begin
    if(signal == 1)
         count <= count + 1'b1;
      
    if (count > 3300 && count < 5300)
        begin
            temp_color = 1;   
            count = 0;
        end
    else
        temp_color=0;
    end 
    assign color = temp_color;
endmodule




//module Freq_Counter(rst, clk, count);
//parameter size = 16;
//input rst;       
//input clk;       
//output [size-1:0] count;

//reg [size-1:0] count=0; 

//always @ (posedge clk or negedge rst )
//    begin
//      if (!rst) // This causes reset of the cntr 
//  count = 0;
//     else if(count<16'hFFFF)
//   begin
//    count = count + 1'b1;
//   end
 
//end

//endmodule

